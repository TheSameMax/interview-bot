import 'dart:io';
import 'package:http/http.dart' as http;
import 'questions.dart';

final String token = Platform.environment['BOT_TOKEN'] ?? '';
final String apiUrl = 'https://api.telegram.org/bot$token';

Future<void> sendMessage(int chatId, String text, [Map<String, dynamic>? replyMarkup]) async {
  final url = Uri.parse('$apiUrl/sendMessage');
  final body = {
    'chat_id': chatId,
    'text': text,
    'parse_mode': 'Markdown',
    'reply_markup': json.encode(replyMarkup ?? {}),
  };
  await http.post(url, body: body);
}

void analyzeResults(Map<String, dynamic> userData, int chatId) async {
  final answers = userData['answers'] as List<int>;
  final filtered = userData['filtered'] as List<Question>;

  final byTopic = <String, int>{};
  int correct = 0;

  for (int i = 0; i < 10; i++) {
    final q = filtered[i];
    final isCorrect = answers[i] == q.correctIndex;
    if (isCorrect) {
      correct++;
      byTopic[q.topic] = (byTopic[q.topic] ?? 0) + 1;
    }
  }

  final analysis = '''
üéØ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!*
–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ *$correct –∏–∑ 10*.

üîç *–ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º–∞–º:*
‚Ä¢ –û—Å–Ω–æ–≤—ã: ${byTopic['basics'] ?? 0}/3 ${byTopic['basics'] == 3 ? '‚úÖ' : byTopic['basics']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é: ${byTopic['memory'] ?? 0}/3 ${byTopic['memory'] == 3 ? '‚úÖ' : byTopic['memory']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å: ${byTopic['async'] ?? 0}/3 ${byTopic['async'] == 3 ? '‚úÖ' : byTopic['async']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –í–∏–¥–∂–µ—Ç—ã: ${byTopic['widgets'] ?? 0}/3 ${byTopic['widgets'] == 3 ? '‚úÖ' : byTopic['widgets']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${byTopic['architecture'] ?? 0}/1 ${byTopic['architecture'] == 1 ? '‚úÖ' : '‚ùå'}

üìå *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
  ''';

  String recommendations = '';

  if ((byTopic['async'] ?? 0) < 2) {
    recommendations += 'üî∏ –ò–∑—É—á–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å: Future, Isolate, async/await\n';
    recommendations += '‚Ä¢ https://dart.dev/codelabs/async-await\n';
  }

  if ((byTopic['architecture'] ?? 0) < 1) {
    recommendations += '\nüî∏ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:\n';
    recommendations += '‚Ä¢ BLoC: https://pub.dev/packages/flutter_bloc\n';
    recommendations += '‚Ä¢ Clean Architecture: https://github.com/brianegan/flutter_architecture_samples\n';
  }

  if (recommendations.isEmpty) {
    recommendations = "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ì–æ—Ç–æ–≤ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é!";
  }

  if (correct < 3) {
    recommendations += "\n\nüí° –ê —Ç–µ–ø–µ—Ä—å –∞–Ω–µ–∫–¥–æ—Ç:\n_–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–µ –ø–æ—à—ë–ª –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ?_\n`Because null == true`";
  }

  await sendMessage(chatId, analysis + recommendations);
}