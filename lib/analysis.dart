import 'package:teler/teler.dart';

void analyzeResults(TelegramContext ctx, Map<String, dynamic> userData) {
  final answers = userData['answers'];
  final filtered = userData['filtered'];
  final byTopic = {
    'basics': 0,
    'memory': 0,
    'async': 0,
    'widgets': 0,
    'architecture': 0,
  };

  int correct = 0;

  for (int i = 0; i < 10; i++) {
    final q = filtered[i];
    final isCorrect = answers[i] == q.correctIndex;
    if (isCorrect) {
      correct++;
      byTopic[q.topic] = (byTopic[q.topic] ?? 0) + 1;
    }
  }

  final recommendations = generateRecommendations(byTopic, filtered);

  final analysis = '''
üéØ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!*
–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ *$correct –∏–∑ 10*.

üîç *–ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º–∞–º:*
‚Ä¢ –û—Å–Ω–æ–≤—ã: ${byTopic['basics']}/3 ${byTopic['basics'] == 3 ? '‚úÖ' : byTopic['basics']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é: ${byTopic['memory']}/3 ${byTopic['memory'] == 3 ? '‚úÖ' : byTopic['memory']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å: ${byTopic['async']}/3 ${byTopic['async'] == 3 ? '‚úÖ' : byTopic['async']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –í–∏–¥–∂–µ—Ç—ã: ${byTopic['widgets']}/3 ${byTopic['widgets'] == 3 ? '‚úÖ' : byTopic['widgets']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${byTopic['architecture']}/1 ${byTopic['architecture'] == 1 ? '‚úÖ' : '‚ùå'}

üìå *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
${recommendations.isEmpty ? "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ì–æ—Ç–æ–≤ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é!" : recommendations}
''';

  ctx.reply(analysis, parseMode: 'Markdown');
}

String generateRecommendations(Map<String, int> byTopic, List<Question> filtered) {
  final recommendations = StringBuffer();

  if (byTopic['basics']! < 2) {
    recommendations.writeln('- üîπ –ò–∑—É—á–∏ –æ—Å–Ω–æ–≤—ã:');
    recommendations.writeln('  ‚Ä¢ https://docs.swift.org/swift-book/');
    recommendations.writeln('  ‚Ä¢ https://dart.dev/guides/language/language-tour');
    recommendations.writeln('  ‚Ä¢ https://docs.flutter.dev/get-started');
  }

  if (byTopic['memory']! < 2) {
    recommendations.writeln('- üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é:');
    recommendations.writeln('  ‚Ä¢ https://docs.swift.org/swift-book/documentation/the-swift-programming-language/automaticreferencecounting/');
    recommendations.writeln('  ‚Ä¢ https://dart.dev/guides/language/effective-dart/design#memory-management');
  }

  if (byTopic['async']! < 2) {
    recommendations.writeln('- üîπ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å:');
    recommendations.writeln('  ‚Ä¢ https://dart.dev/codelabs/async-await');
    recommendations.writeln('  ‚Ä¢ https://docs.flutter.dev/cookbook/networking/fetch-data');
  }

  if (byTopic['widgets']! < 2) {
    recommendations.writeln('- üîπ –í–∏–¥–∂–µ—Ç—ã –≤ Flutter:');
    recommendations.writeln('  ‚Ä¢ https://docs.flutter.dev/ui/widgets');
    recommendations.writeln('  ‚Ä¢ https://docs.flutter.dev/perf');
  }

  if (byTopic['architecture']! < 1) {
    recommendations.writeln('- üîπ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:');
    recommendations.writeln('  ‚Ä¢ BLoC: https://pub.dev/packages/flutter_bloc');
    recommendations.writeln('  ‚Ä¢ Clean Architecture: https://github.com/brianegan/flutter_architecture_samples');
  }

  return recommendations.toString();
}