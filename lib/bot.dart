import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:interview_bot/analysis.dart';
import 'package:interview_bot/questions.dart';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
Map<int, Map<String, dynamic>> userState = {};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
final String token = Platform.environment['BOT_TOKEN'] ?? '';
final String apiUrl = 'https://api.telegram.org/bot$token';

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
Future<void> sendMessage(int chatId, String text, [Map<String, dynamic>? replyMarkup]) async {
  final url = Uri.parse('$apiUrl/sendMessage');
  final body = {
    'chat_id': chatId,
    'text': text,
    'parse_mode': 'Markdown',
    'reply_markup': json.encode(replyMarkup ?? {}),
  };
  await http.post(url, body: body);
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è polling)
Future<void> setWebhook() async {
  final url = Uri.parse('$apiUrl/setWebhook');
  final body = {'url': ''}; // –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
  await http.post(url, body: body);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
Future<List<dynamic>> getUpdates(int offset) async {
  final url = Uri.parse('$apiUrl/getUpdates?offset=$offset&timeout=30');
  final response = await http.get(url);
  final json = jsonDecode(response.body);
  return json['ok'] == true ? json['result'] : [];
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
Future<void> sendWelcome(int chatId) async {
  final replyMarkup = {
    'keyboard': [
      [{'text': 'Swift'}, {'text': 'Dart'}, {'text': 'Flutter'}],
      [{'text': '‚ùì –ü–æ–º–æ—â—å'}]
    ],
    'resize_keyboard': true,
  };

  await sendMessage(
    chatId,
    'üëã –ü—Ä–∏–≤–µ—Ç, –±—É–¥—É—â–∏–π Senior!\n\n'
    '–Ø ‚Äî *DevSurvivalBot*, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é '
    '–ø–æ **Swift, Dart –∏–ª–∏ Flutter**.\n\n'
    'üîπ –û—Ç–≤–µ—á–∞–π –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤\n'
    'üîπ –ü–æ–ª—É—á–∏ –∞–Ω–∞–ª–∏–∑ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π\n'
    'üîπ –ò —á–µ—Å—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫—É–¥–∞ —Å–º–æ—Ç—Ä–µ—Ç—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n\n'
    '–ì–æ—Ç–æ–≤? –í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é:',
    replyMarkup,
  );
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
Future<void> sendHelp(int chatId) async {
  await sendMessage(
    chatId,
    'üìå *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n\n'
    '1. –í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é: Swift, Dart –∏–ª–∏ Flutter\n'
    '2. –û—Ç–≤–µ—á–∞–π –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤\n'
    '3. –í –∫–æ–Ω—Ü–µ –ø–æ–ª—É—á–∏—à—å:\n'
    '   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n'
    '   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç\n'
    '   ‚Ä¢ –°—Å—ã–ª–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n\n'
    'üí° –°–æ–≤–µ—Ç: –Ω–µ –±–æ–π—Å—è –æ—à–∏–±–∞—Ç—å—Å—è ‚Äî —è –Ω–µ @BotFather, —á—Ç–æ–±—ã —Ç–µ–±—è –±–∞–Ω–∏—Ç—å.',
  );
}

// –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
Future<void> askQuestion(int chatId, int index, List<Question> filtered) async {
  final question = filtered[index];
  final replyMarkup = {
    'keyboard': question.options.map((opt) => [{'text': opt}]).toList(),
    'resize_keyboard': true,
    'one_time_keyboard': true,
  };

  await sendMessage(
    chatId,
    '*–í–æ–ø—Ä–æ—Å ${index + 1}:*\n\n${question.text}',
    replyMarkup,
  );
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
Future<void> showResult(int chatId, List<int> answers, List<Question> filtered) async {
  final byTopic = <String, int>{};

  int correct = 0;

  for (int i = 0; i < 10; i++) {
    final q = filtered[i];
    final isCorrect = answers[i] == q.correctIndex;
    if (isCorrect) {
      correct++;
      byTopic[q.topic] = (byTopic[q.topic] ?? 0) + 1;
    }
  }

  final analysis = '''
üéØ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!*
–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ *$correct –∏–∑ 10*.

üîç *–ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º–∞–º:*
‚Ä¢ –û—Å–Ω–æ–≤—ã: ${byTopic['basics'] ?? 0}/3 ${byTopic['basics'] == 3 ? '‚úÖ' : byTopic['basics']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é: ${byTopic['memory'] ?? 0}/3 ${byTopic['memory'] == 3 ? '‚úÖ' : byTopic['memory']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å: ${byTopic['async'] ?? 0}/3 ${byTopic['async'] == 3 ? '‚úÖ' : byTopic['async']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –í–∏–¥–∂–µ—Ç—ã: ${byTopic['widgets'] ?? 0}/3 ${byTopic['widgets'] == 3 ? '‚úÖ' : byTopic['widgets']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${byTopic['architecture'] ?? 0}/1 ${byTopic['architecture'] == 1 ? '‚úÖ' : '‚ùå'}

üìå *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
  ''';

  String recommendations = '';

  if ((byTopic['async'] ?? 0) < 2) {
    recommendations += 'üî∏ –ò–∑—É—á–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å: Future, Isolate, async/await\n';
    recommendations += '‚Ä¢ https://dart.dev/codelabs/async-await\n';
  }

  if ((byTopic['architecture'] ?? 0) < 1) {
    recommendations += '\nüî∏ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:\n';
    recommendations += '‚Ä¢ BLoC: https://pub.dev/packages/flutter_bloc\n';
    recommendations += '‚Ä¢ Clean Architecture: https://github.com/brianegan/flutter_architecture_samples\n';
  }

  if (recommendations.isEmpty) {
    recommendations = "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ì–æ—Ç–æ–≤ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é!";
  }

  if (correct < 3) {
    recommendations += "\n\nüí° –ê —Ç–µ–ø–µ—Ä—å –∞–Ω–µ–∫–¥–æ—Ç:\n_–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–µ –ø–æ—à—ë–ª –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ?_\n`Because null == true`";
  }

  await sendMessage(chatId, analysis + recommendations);
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
Future<void> startBot() async {
  final List<Question> questions = loadQuestions();
  int offset = 0;

  // –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º polling)
  await setWebhook();

  print('‚úÖ DevSurvivalBot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –±–æ—é!');

  while (true) {
    final updates = await getUpdates(offset);
    for (final update in updates) {
      offset = update['update_id'] + 1;
      final message = update['message'];
      if (message == null) continue;

      final chatId = message['chat']['id'];
      final text = message['text'] as String?;

      final userData = userState[chatId] ?? {
        'answers': <int>[],
        'index': 0,
        'tech': null,
        'filtered': [],
      };

      if (text == '/start') {
        userData['answers'] = [];
        userData['index'] = 0;
        userData['tech'] = null;
        userData['filtered'] = [];
        userState[chatId] = userData;
        await sendWelcome(chatId);
        continue;
      }

      if (text == '‚ùì –ü–æ–º–æ—â—å') {
        await sendHelp(chatId);
        continue;
      }

      if (text == 'Swift' || text == 'Dart' || text == 'Flutter') {
        final tech = text.toLowerCase();
        final filtered = questions.where((q) => q.tech == tech).toList();
        userData['tech'] = tech;
        userData['filtered'] = filtered;
        userState[chatId] = userData;
        await askQuestion(chatId, 0, filtered);
        continue;
      }

      final index = userData['index'];
      if (index >= 10) continue;

      final filtered = userData['filtered'] as List<Question>;
      final question = filtered[index];
      final selectedOption = question.options.indexOf(text!);
      if (selectedOption == -1) continue;

      userData['answers'].add(selectedOption);
      userState[chatId] = userData;

      final isCorrect = selectedOption == question.correctIndex;
      await sendMessage(chatId, isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${question.options[question.correctIndex]}');

      final nextIndex = index + 1;
      userData['index'] = nextIndex;
      userState[chatId] = userData;

      if (nextIndex < 10) {
        await Future.delayed(const Duration(seconds: 1));
        await askQuestion(chatId, nextIndex, filtered);
      } else {
        await showResult(chatId, userData['answers'], filtered);
      }
    }
  }
}