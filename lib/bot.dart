import 'dart:convert';
import 'dart:io';
import 'package:telegraf/telegraf.dart';
import 'package:interview_bot/questions.dart';

final bot = Bot(Platform.environment['BOT_TOKEN'] ?? '');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
Map<int, Map<String, dynamic>> userState = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
List<Question> questions = loadQuestions();

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
void setCommands() {
  bot.setMyCommands([
    BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"),
    BotCommand("help", "‚ùì –ü–æ–º–æ—â—å –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏"),
    BotCommand("restart", "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç"),
  ]);
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
Future<void> sendWelcome(TelegramContext ctx) async {
  await ctx.reply(
    'üëã –ü—Ä–∏–≤–µ—Ç, –±—É–¥—É—â–∏–π Senior!\n\n'
    '–Ø ‚Äî *DevSurvivalBot*, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é '
    '–ø–æ **Swift, Dart –∏–ª–∏ Flutter**.\n\n'
    'üîπ –û—Ç–≤–µ—á–∞–π –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤\n'
    'üîπ –ü–æ–ª—É—á–∏ –∞–Ω–∞–ª–∏–∑ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π\n'
    'üîπ –ò —á–µ—Å—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫—É–¥–∞ —Å–º–æ—Ç—Ä–µ—Ç—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n\n'
    '–ì–æ—Ç–æ–≤? –í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é:',
    replyMarkup: ReplyKeyboardMarkup(
      keyboard: [
        [KeyboardButton(text: 'Swift'), KeyboardButton(text: 'Dart'), KeyboardButton(text: 'Flutter')],
        [KeyboardButton(text: '‚ùì –ü–æ–º–æ—â—å')]
      ],
      resizeKeyboard: true,
    ),
    parseMode: ParseMode.markdown,
  );
}

// –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
void setupBot() {
  setCommands();

  bot.onCommand('start', (ctx) async {
    final userId = ctx.from.id;
    userState[userId] = {
      'answers': <int>[],
      'index': 0,
      'tech': null,
      'filtered': [],
    };
    await sendWelcome(ctx);
  });

  bot.onCommand('help', (ctx) async {
    await ctx.reply(
      'üìå *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n\n'
      '1. –í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é: Swift, Dart –∏–ª–∏ Flutter\n'
      '2. –û—Ç–≤–µ—á–∞–π –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤\n'
      '3. –í –∫–æ–Ω—Ü–µ –ø–æ–ª—É—á–∏—à—å:\n'
      '   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n'
      '   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç\n'
      '   ‚Ä¢ –°—Å—ã–ª–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n\n'
      'üí° –°–æ–≤–µ—Ç: –Ω–µ –±–æ–π—Å—è –æ—à–∏–±–∞—Ç—å—Å—è ‚Äî —è –Ω–µ @BotFather, —á—Ç–æ–±—ã —Ç–µ–±—è –±–∞–Ω–∏—Ç—å.',
      parseMode: ParseMode.markdown,
    );
  });

  bot.onCommand('restart', (ctx) async {
    final userId = ctx.from.id;
    userState[userId] = {
      'answers': <int>[],
      'index': 0,
      'tech': null,
      'filtered': [],
    };
    await ctx.reply('üîÑ –¢–µ—Å—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é:', replyMarkup: ReplyKeyboardMarkup(
      keyboard: [
        [KeyboardButton(text: 'Swift'), KeyboardButton(text: 'Dart'), KeyboardButton(text: 'Flutter')],
        [KeyboardButton(text: '‚ùì –ü–æ–º–æ—â—å')]
      ],
      resizeKeyboard: true,
    ));
  });

  bot.onMessage((ctx) async {
    final text = ctx.message.text;
    final userId = ctx.from.id;
    final userData = userState[userId];
    if (userData == null) return;

    if (text == 'Swift' || text == 'Dart' || text == 'Flutter') {
      final tech = text.toLowerCase();
      final filtered = questions.where((q) => q.tech == tech).toList();
      userData['tech'] = tech;
      userData['filtered'] = filtered;
      await askQuestion(ctx);
      return;
    }

    if (text == '‚ùì –ü–æ–º–æ—â—å') {
      await bot.handlers['help']!(ctx);
      return;
    }

    final index = userData['index'];
    if (index >= 10) return;

    final filtered = userData['filtered'];
    final question = filtered[index];
    final selectedOption = question.options.indexOf(text!);
    if (selectedOption == -1) return;

    userData['answers'].add(selectedOption);

    final isCorrect = selectedOption == question.correctIndex;
    await ctx.reply(
      isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${question.options[question.correctIndex]}',
    );

    userData['index'] = index + 1;
    if (index + 1 < 10) {
      await Future.delayed(const Duration(seconds: 1));
      await askQuestion(ctx);
    } else {
      await showResult(ctx);
    }
  });
}

// –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
Future<void> askQuestion(TelegramContext ctx) async {
  final userId = ctx.from.id;
  final userData = userState[userId]!;
  final index = userData['index'];
  final filtered = userData['filtered'];

  final question = filtered[index];

  await ctx.reply(
    '*–í–æ–ø—Ä–æ—Å ${index + 1}:*\n\n${question.text}',
    replyMarkup: ReplyKeyboardMarkup(
      keyboard: question.options.map((opt) => [KeyboardButton(text: opt)]).toList(),
      resizeKeyboard: true,
      oneTimeKeyboard: true,
    ),
    parseMode: ParseMode.markdown,
  );
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
Future<void> showResult(TelegramContext ctx) async {
  final userId = ctx.from.id;
  final userData = userState[userId]!;
  final filtered = userData['filtered'];
  final answers = userData['answers'];

  final byTopic = {
    'basics': 0,
    'memory': 0,
    'async': 0,
    'widgets': 0,
    'architecture': 0,
  };

  int correct = 0;

  for (int i = 0; i < 10; i++) {
    final q = filtered[i];
    final isCorrect = answers[i] == q.correctIndex;
    if (isCorrect) {
      correct++;
      byTopic[q.topic] = (byTopic[q.topic] ?? 0) + 1;
    }
  }

  final analysis = '''
üéØ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!*
–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ *$correct –∏–∑ 10*.

üîç *–ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º–∞–º:*
‚Ä¢ –û—Å–Ω–æ–≤—ã: ${byTopic['basics']}/3 ${byTopic['basics'] == 3 ? '‚úÖ' : byTopic['basics']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é: ${byTopic['memory']}/3 ${byTopic['memory'] == 3 ? '‚úÖ' : byTopic['memory']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å: ${byTopic['async']}/3 ${byTopic['async'] == 3 ? '‚úÖ' : byTopic['async']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –í–∏–¥–∂–µ—Ç—ã: ${byTopic['widgets']}/3 ${byTopic['widgets'] == 3 ? '‚úÖ' : byTopic['widgets']! >= 2 ? '‚ö†Ô∏è' : '‚ùå'}
‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${byTopic['architecture']}/1 ${byTopic['architecture'] == 1 ? '‚úÖ' : '‚ùå'}

üìå *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
  ''';

  String recommendations = '';

  if (byTopic['async']! < 2) {
    recommendations += 'üî∏ –ò–∑—É—á–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å: Future, Isolate, async/await\n';
    recommendations += '‚Ä¢ https://dart.dev/codelabs/async-await\n';
  }

  if (byTopic['architecture']! < 1) {
    recommendations += '\nüî∏ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:\n';
    recommendations += '‚Ä¢ BLoC: https://pub.dev/packages/flutter_bloc\n';
    recommendations += '‚Ä¢ Clean Architecture: https://github.com/brianegan/flutter_architecture_samples\n';
  }

  if (recommendations.isEmpty) {
    recommendations = "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ì–æ—Ç–æ–≤ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é!";
  }

  if (correct < 3) {
    recommendations += "\n\nüí° –ê —Ç–µ–ø–µ—Ä—å –∞–Ω–µ–∫–¥–æ—Ç:\n_–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–µ –ø–æ—à—ë–ª –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ?_\n`Because null == true`";
  }

  await ctx.reply(analysis + recommendations, parseMode: ParseMode.markdown);
}