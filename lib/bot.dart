import 'dart:convert';
import 'dart:io';
import 'package:teler/teler.dart';
import 'questions.dart';
import 'analysis.dart';

final bot = Teler(token: Platform.environment['BOT_TOKEN'] ?? '');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
Map<int, Map<String, dynamic>> userState = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
List<Question> questions = loadQuestions();

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
void setCommands() {
  bot.setMyCommands([
    BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"),
    BotCommand("help", "‚ùì –ü–æ–º–æ—â—å –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏"),
    BotCommand("restart", "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç"),
  ]);
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
Future<void> sendWelcome(TelegramContext ctx) async {
  await ctx.reply(
    'üëã –ü—Ä–∏–≤–µ—Ç, –±—É–¥—É—â–∏–π Senior!\n\n'
    '–Ø ‚Äî *DevSurvivalBot*, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é '
    '–ø–æ **Swift, Dart –∏–ª–∏ Flutter**.\n\n'
    'üîπ –û—Ç–≤–µ—á–∞–π –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤\n'
    'üîπ –ü–æ–ª—É—á–∏ –∞–Ω–∞–ª–∏–∑ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π\n'
    'üîπ –ò —á–µ—Å—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫—É–¥–∞ —Å–º–æ—Ç—Ä–µ—Ç—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n\n'
    '–ì–æ—Ç–æ–≤? –í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é:',
    replyMarkup: {
      'keyboard': [
        [{'text': 'Swift'}, {'text': 'Dart'}, {'text': 'Flutter'}],
        [{'text': '‚ùì –ü–æ–º–æ—â—å'}]
      ],
      'resize_keyboard': true,
      'one_time_keyboard': false,
    },
    parseMode: 'Markdown',
  );
}

// –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
void setupBot() {
  setCommands();

  bot.command('start', (ctx) async {
    final userId = ctx.from.id;
    userState[userId] = {
      'answers': <int>[],
      'index': 0,
      'tech': null,
      'filtered': [],
    };
    await sendWelcome(ctx);
  });

  bot.command('help', (ctx) async {
    await ctx.reply(
      'üìå *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n\n'
      '1. –í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é: Swift, Dart –∏–ª–∏ Flutter\n'
      '2. –û—Ç–≤–µ—á–∞–π –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤\n'
      '3. –í –∫–æ–Ω—Ü–µ –ø–æ–ª—É—á–∏—à—å:\n'
      '   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n'
      '   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç\n'
      '   ‚Ä¢ –°—Å—ã–ª–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n\n'
      'üí° –°–æ–≤–µ—Ç: –Ω–µ –±–æ–π—Å—è –æ—à–∏–±–∞—Ç—å—Å—è ‚Äî —è –Ω–µ @BotFather, —á—Ç–æ–±—ã —Ç–µ–±—è –±–∞–Ω–∏—Ç—å.',
      parseMode: 'Markdown',
    );
  });

  bot.command('restart', (ctx) async {
    final userId = ctx.from.id;
    userState[userId] = {
      'answers': <int>[],
      'index': 0,
      'tech': null,
      'filtered': [],
    };
    await ctx.reply('üîÑ –¢–µ—Å—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é:', replyMarkup: {
      'keyboard': [
        [{'text': 'Swift'}, {'text': 'Dart'}, {'text': 'Flutter'}],
        [{'text': '‚ùì –ü–æ–º–æ—â—å'}]
      ],
      'resize_keyboard': true,
    });
  });

  bot.hears(['Swift', 'Dart', 'Flutter'], (ctx) async {
    final userId = ctx.from.id;
    final tech = ctx.message.text!.toLowerCase();
    final filtered = questions.where((q) => q.tech == tech).toList();
    userState[userId]!['tech'] = tech;
    userState[userId]!['filtered'] = filtered;
    await askQuestion(ctx);
  });

  bot.hears('‚ùì –ü–æ–º–æ—â—å', (ctx) async {
    await bot.handlers['help']!(ctx);
  });

  bot.on('message', (ctx) async {
    final text = ctx.message.text;
    final userId = ctx.from.id;
    final userData = userState[userId];
    if (userData == null || userData['tech'] == null) return;

    final index = userData['index'];
    if (index >= 10) return;

    final filtered = userData['filtered'];
    final question = filtered[index];
    final selectedOption = question.options.indexOf(text!);
    if (selectedOption == -1) return;

    userData['answers'].add(selectedOption);

    final isCorrect = selectedOption == question.correctIndex;
    await ctx.reply(
      isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${question.options[question.correctIndex]}',
    );

    userData['index'] = index + 1;
    if (index + 1 < 10) {
      await Future.delayed(const Duration(seconds: 1));
      await askQuestion(ctx);
    } else {
      await showResult(ctx);
    }
  });
}

// –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
Future<void> askQuestion(TelegramContext ctx) async {
  final userId = ctx.from.id;
  final userData = userState[userId]!;
  final index = userData['index'];
  final filtered = userData['filtered'];

  final question = filtered[index];

  await ctx.reply(
    '*–í–æ–ø—Ä–æ—Å ${index + 1}:*\n\n${question.text}',
    replyMarkup: {
      'keyboard': question.options.map((opt) => [{'text': opt}]).toList(),
      'resize_keyboard': true,
      'one_time_keyboard': true,
    },
    parseMode: 'Markdown',
  );
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
Future<void> showResult(TelegramContext ctx) async {
  final userId = ctx.from.id;
  final userData = userState[userId]!;
  final filtered = userData['filtered'];
  final answers = userData['answers'];

  analyzeResults(ctx, userData);
}